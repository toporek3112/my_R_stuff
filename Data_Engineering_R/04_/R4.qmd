---
title: "R4: Visualising Data Relations"
subtitle: "Data visualisation with `{ggplot2}` in `{tidyverse}`"
author: "Andreas Reschreiter"
date: today
embed-resources: true
fig-align: center
format:
  html: 
    #df-print: paged
    output-file: R4_html.html
    #output-ext: "html.html" 
    self-contained: true
    toc: true
    toc-location: right
    code-link: true
    code-tools: true
    theme:
      light: flatly
      dark: darkly
  pdf: 
    output-file: R4_pdf.pdf 
    toc: true
    number-sections: true
    code-link: true
    fig-align: center
    shift-heading-level-by: -1
    papersize: A4
  revealjs:
    output-file: "R4_revealjs.html"
    #output-ext: "revealjs.html" 
    theme: sky
    slide-level: 2
    #slide-tone: true
    slide-number: c/t
    #toc: true
    echo: true
    code-fold: show
    code-tools: true
    code-line-numbers: false
    #code-link: true
    scrollable: true
    #smaller: true
    reference-location: document
    self-contained-math: true
    self-contained: true
execute: 
  warning: false
---


```{r setup, include=FALSE}
## set global chunk options
knitr::opts_chunk$set(warning = FALSE, message = FALSE,
                      out.width = "70%",
                      fig.align = "center")
```

## Libraries

```{r collapse=TRUE}
#| code-summary: Libraries an Setup
suppressPackageStartupMessages({
  library(tidyverse) # includes ggplot2 
})
```

## Data

We will visualize the `datasets::mtcars` data.

```{r}
glimpse(mtcars)
```

## Date manipultation

Fix vs/am labels first:

```{r}
cars <- as_tibble(mtcars, rownames = "names") %>% 
  mutate(am = ifelse(am == 1, "manual", "automatic"),
                     vs = ifelse(vs == 1, "straight", "v-shaped"))
```

## Make `{ggplot2}` plots

1. To create a plot, create a `ggplot()` object (and link it to a data set) 
1. Define the (default) mapping of variables to "aestethics". 
1. Choose a "geom". This can define specific aesthetics
1. Add context (title, legends, axis)

## A `{ggplot2}` plot

```{r}
g <- ggplot(cars) +
    aes(x = mpg, y = disp) + ## apply to all geoms
    geom_point(aes(col = cyl, size = qsec))
g
```


## Labels

```{r}
g <- g + ggtitle("Displacement vs. Fuel Consumption of Cars",
            subtitle = paste0("N = ", nrow(cars))) +
  xlab("Miles per Gallon") + ylab("Displacement")
g
```

## Legends

```{r}
## use discrete values instead of color bar
g <- g + guides(col = "legend") + 
    
  ## modify guide names    
  scale_color_continuous(name = "cylinder") +
  scale_size_continuous(name = "qsec time")
g
```

## Annotations

```{r}
g + 
  geom_segment(aes(x = 25, y = 300, xend = 22, yend = 260),
               arrow = arrow(length = unit(0.2, "cm")), 
               col = "red") + 
  annotate("text", 25, 320, label = "Note this!", col = "red")
```


## Several layers (geoms) in one graph

The graphs are "layered", so that several geoms can be combined:

```{r}
g + geom_smooth(col = "dark magenta")
```

## Groupings

If categorical variables are mapped in an aestethic, they automatically define visual groups:

```{r}
g + geom_smooth(aes(group = cyl, col = cyl))
```

## Facets

Another kind of layer are "facets", used to create plots conditioned by factors:

```{r}
g + 
  geom_smooth(col = "dark magenta") +
  facet_wrap(~ am)
```

## Two conditioning variables

```{r warning=FALSE}
g + 
  geom_smooth(col = "dark magenta") +
  facet_grid(vs ~ am)
```

## Some more tweaks:

```{r warning = FALSE}
g + 
  geom_smooth(col = "dark magenta") +
  facet_grid(vs ~ am, 
             margins = TRUE, 
             scales = "free", 
#             space = "free",
             switch = "y")
```

## Scales

```{r}
g + scale_y_log10() + geom_smooth(method = "lm")
g + scale_color_distiller(type = "qual") ## formally, cylinder is quantitative!
```


## Themes

```{r}
#| layout-ncol: 2
g + theme_classic()
g + theme_bw()
g + theme_minimal()
g + theme_void()
g + theme(legend.position = "left")
```

## Saving plots

```{r}
ggsave("test.png")
ggsave("test.pdf")
ggsave("test.jpeg", g) ## save plot from a ggplot object
```

## Include saved plots

@fig-test includes the saved plot via a code chunk.
```{r}
#| label: fig-test
#| fig-cap: "A saved plot included via Code chunk"
knitr::include_graphics("test.png")  
# use ouside of junks  `![](test.png)` to include graphs 
```

--- 

Can include saved plot via Markdown code:

```md
![Plot included from outside of code chunk](test.png)
```

![Plot included from outside of code chunk](test.png)




